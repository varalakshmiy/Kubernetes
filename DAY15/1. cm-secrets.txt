
configMap and secrets---cm,secrets both r ns level object only
======================
cm,secrets both r k8 objects.
-configmap---it is a plain text,non confidential data we can declare as config map,we have to decide which is configmap which is secret in yaml file.
-cm is a api object which used to store non-confidentials data ,in key-vaue pair,config map data cannot encrypt,data u want to store confidential use seceret rather than configmap.
-secrets--base64 alrgaritham encrypt.confidential data
-secret helpus to store confidential data in the form of key-value pair.

configMap--> plaintext

secrets: base64 ---> encrypted format
Ex: echo "password" | base64
o/p:- cgfdh$dvcmqk

NOTE: configMap and secrets data will be stored in ETCD



--> A ConfigMap is an API object used to store non-confidential data in key-value pairs. Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.

Caution:
--------
ConfigMap does not provide secrecy or encryption. If the data you want to store are confidential, use a Secret rather than a ConfigMap, or use additional (third party) tools to keep your data private.

--------------------------------------------------------------------------------------------------------------------------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: "3"
  ui_properties_file_name: "user-interface.properties"

  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true
---
apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: alpine
      command: ["sleep", "3600"]
      env:
        # Define the environment variable
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
                                     # from the key name in the ConfigMap.
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      volumeMounts:
      - name: config
        mountPath: "/config"
        readOnly: true
  volumes:
  # You set volumes at the Pod level, then mount them into containers inside that Pod
  - name: config
    configMap:
      # Provide the name of the ConfigMap you want to mount.
      name: game-demo
      # An array of keys from the ConfigMap to create as files
      items:
      - key: "game.properties"
        path: "game.properties"
      - key: "user-interface.properties"
        path: "user-interface.properties"

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
=to see env details of ur configmap===========
------------------------------------
kubectl exec -it configmap-demo-pod  -- env  --> to see the env details

kubectl describe po configmap-demo-pod --> see the volume details as configConfig

kubectl exec -it configmap-demo-pod -- ls /config


kubectl exec -it configmap-demo-pod -- cat /config/game.properties

kubectl exec -it configmap-demo-pod -- cat /config/user-interface.properties







=========================================================

--> explain this with our application

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodb
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocon
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:  
              name: springappconfig  # Name of the ConfigMap
              key: db_username  # Key in the ConfigMap
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: springappsecret  # Name of the Secret
              key: db_password  # Key in the Secret
        volumeMounts:
        - name: mongonfsvol
          mountPath: /data/db
      volumes:
      - name: mongonfsvol
        persistentVolumeClaim:
          claimName: mongodb1-pvc  # Make sure this matches your PVC name


---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: prod
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
-----------------------------------------
o/p: pod is pending because there is no pvc.
-------------------------------------------




springappcongig.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: springappconfig
  namespace: prod  # Ensure this matches your ReplicaSet's namespace
data:
  db_username: devdb  # Username for MongoDB
 



springappsecret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: springappsecret
  namespace: prod  # Ensure this matches your ReplicaSet's namespace
type: Opaque
stringData:
  db_password: devdb@123








apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv1
spec:
  capacity:
    storage: 1Gi  # Adjust as necessary
  accessModes:
    - ReadWriteMany  # NFS supports this
  nfs:
    server: 172.31.18.8  # Your NFS server IP
    path: /mnt/nfs_share  # Path on your NFS server

---pv is bound based on accessmodes and storage------------


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb1-pvc
  namespace: prod # This is correct
spec:
  accessModes:
    - ReadWriteMany  # Must match the PV's access mode
  resources:
    requests:
      storage: 1Gi  # Must match or be less than the PV's size

iq: pod status createcontainerconfigerror  becaz show cmand secrets,chech describe pods and evenets, 

Assignment
=============


apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
  namespace: prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springapp
        image: kkeducation12345/spring-app:1.0.0
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: devdb
        - name: MONGO_DB_PASSWORD
          value: devdb@123
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: springappsvc
  namespace: dev
spec:
  type: NodePort
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080




