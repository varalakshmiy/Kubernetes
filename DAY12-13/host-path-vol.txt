k8s volumes
============
-emptydir,hostpath,nfs,persistent volume ,persistence volume claims
-in emptydir store data in mongo db in /data/db ,once pod is deleted data loss will happen so pod also create in diff node also.

apiVersion: apps/v1
kind: ReplicaSet
metadata: 
  name: mongodb
  namespace: test-ns
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocon
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: devdb
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: devdb@123
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017





==================================


apiVersion: apps/v1
kind: Deployment
metadata:
  name: springapp
  namespace: test-ns 
spec:
  replicas: 2
  selector: 
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:  
      containers:
      - name: springapp
        image: kkeducation12345/spring-app:1.0.0
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: devdb
        - name: MONGO_DB_PASSWORD
          value: devdb@123

---
apiVersion: v1
kind: Service
metadata:
  name: springappsvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080




kubectl exec -it <pod-Name> -n <NS> -- ls /data/db



======================================================


---> After adding host path volumes,i am set up with hostpathvolumes,in my pro we dont have pv,pvc,



apiVersion: apps/v1
kind: ReplicaSet
metadata: 
  name: mongodb
  namespace: test-ns
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocon
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: devdb
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: devdb@123
        volumeMounts:
        - name: mongovol
          mountPath: /data/db
      volumes:
      - name: mongovol
        hostPath:
          path: /mongobkp
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017



==================
-host path volumes daa in consistency 
==========================
diff b/w nfs,hostpath
---------------------------
NFS volumes in k8s
===================

-default port number for nfs is: 2049
emptyDir
HosptPath Volumes


--> explain the diagram

setup the NFS server
====================

step 1: launch an ec2 m/c and connect to that machine

step 2: update the package manager.

sudo apt update -y

step 3: Allow the traffic to 2049 port.

step 4: install the nfs software

sudo apt install nfs-kernel-server -y

step 5: create nfs shared directory

sudo mkdir -p /mnt/nfs_share

sudo chown nobody:nogroup -R /mnt/nfs_share/

sudo chmod 777 -R /mnt/nfs_share/

step 6: Assign the server access to the clients through NFS export file.


sudo vi /etc/exports

/mnt/nfs_share/ *(rw,sync,no_subtree_check,no_root_squash)


step 7: export the shared directory

sudo exportfs -a

sudo systemctl restart nfs-kernel-server

step 8: check the nfs process is running or not

ps -ef|grep -i "nfs"



configuring the nfs client machine
==================================

--> Install in all the machines of k8s cluster

sudo apt update -y

sudo apt install nfs-common -y


apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodb
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocon
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: devdb
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: devdb@123
        volumeMounts:
        - name: mongonfsvol
          mountPath: /data/db
      volumes:
      - name: mongonfsvol
        nfs:
         server: 172.31.18.8
         path: /mnt/nfs_share

---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: prod
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017


==================================


--> PV and PVC
=================

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
spec:
  capacity:
    storage: 1Gi  # Adjust as necessary
  accessModes:
    - ReadWriteMany  # NFS supports this
  nfs:
    server: 172.31.11.218  # Your NFS server IP
    path: /mnt/nfs_share  # Path on your NFS server



apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: prod # This is correct
spec:
  accessModes:
    - ReadWriteMany  # Must match the PV's access mode
  resources:
    requests:
      storage: 1Gi  # Must match or be less than the PV's size
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodb
  namespace: prod
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongocon
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: devdb
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: devdb@123
        volumeMounts:
        - name: mongonfsvol
          mountPath: /data/db
      volumes:
      - name: mongonfsvol
        persistentVolumeClaim:
          claimName: mongodb-pvc  
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: prod
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sprinapp
  namespace: prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      labels:
        app: springapp
    spec:
      containers:
      - name: springapp
        image: kkeducation12345/spring-app:1.0.0
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: devdb
        - name: MONGO_DB_PASSWORD
          value: devdb@123
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: springappsvc
  namespace: prod
spec:
 type: NodePort
 selector:
   app: springapp
 ports:
 - port: 80
   targetPort: 8080
   

NOTE: pv and pvc are 1 to 1 relationship


          










============================================









